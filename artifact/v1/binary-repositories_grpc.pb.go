// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: artifact/v1/binary-repositories.proto

package artifact

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinaryRepositoriesServiceClient is the client API for BinaryRepositoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryRepositoriesServiceClient interface {
	List(ctx context.Context, in *BinaryRepositoriesListRequest, opts ...grpc.CallOption) (*BinaryRepositoriesListResponse, error)
	Create(ctx context.Context, in *BinaryRepositoriesCreateRequest, opts ...grpc.CallOption) (*BinaryRepositoriesResponse, error)
	Get(ctx context.Context, in *BinaryRepositoriesGetRequest, opts ...grpc.CallOption) (*BinaryRepositoriesResponse, error)
}

type binaryRepositoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryRepositoriesServiceClient(cc grpc.ClientConnInterface) BinaryRepositoriesServiceClient {
	return &binaryRepositoriesServiceClient{cc}
}

func (c *binaryRepositoriesServiceClient) List(ctx context.Context, in *BinaryRepositoriesListRequest, opts ...grpc.CallOption) (*BinaryRepositoriesListResponse, error) {
	out := new(BinaryRepositoriesListResponse)
	err := c.cc.Invoke(ctx, "/artifact.BinaryRepositoriesService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryRepositoriesServiceClient) Create(ctx context.Context, in *BinaryRepositoriesCreateRequest, opts ...grpc.CallOption) (*BinaryRepositoriesResponse, error) {
	out := new(BinaryRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/artifact.BinaryRepositoriesService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryRepositoriesServiceClient) Get(ctx context.Context, in *BinaryRepositoriesGetRequest, opts ...grpc.CallOption) (*BinaryRepositoriesResponse, error) {
	out := new(BinaryRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/artifact.BinaryRepositoriesService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryRepositoriesServiceServer is the server API for BinaryRepositoriesService service.
// All implementations must embed UnimplementedBinaryRepositoriesServiceServer
// for forward compatibility
type BinaryRepositoriesServiceServer interface {
	List(context.Context, *BinaryRepositoriesListRequest) (*BinaryRepositoriesListResponse, error)
	Create(context.Context, *BinaryRepositoriesCreateRequest) (*BinaryRepositoriesResponse, error)
	Get(context.Context, *BinaryRepositoriesGetRequest) (*BinaryRepositoriesResponse, error)
	mustEmbedUnimplementedBinaryRepositoriesServiceServer()
}

// UnimplementedBinaryRepositoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBinaryRepositoriesServiceServer struct {
}

func (UnimplementedBinaryRepositoriesServiceServer) List(context.Context, *BinaryRepositoriesListRequest) (*BinaryRepositoriesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBinaryRepositoriesServiceServer) Create(context.Context, *BinaryRepositoriesCreateRequest) (*BinaryRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBinaryRepositoriesServiceServer) Get(context.Context, *BinaryRepositoriesGetRequest) (*BinaryRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinaryRepositoriesServiceServer) mustEmbedUnimplementedBinaryRepositoriesServiceServer() {
}

// UnsafeBinaryRepositoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryRepositoriesServiceServer will
// result in compilation errors.
type UnsafeBinaryRepositoriesServiceServer interface {
	mustEmbedUnimplementedBinaryRepositoriesServiceServer()
}

func RegisterBinaryRepositoriesServiceServer(s grpc.ServiceRegistrar, srv BinaryRepositoriesServiceServer) {
	s.RegisterService(&BinaryRepositoriesService_ServiceDesc, srv)
}

func _BinaryRepositoriesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRepositoriesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryRepositoriesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifact.BinaryRepositoriesService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryRepositoriesServiceServer).List(ctx, req.(*BinaryRepositoriesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryRepositoriesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRepositoriesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryRepositoriesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifact.BinaryRepositoriesService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryRepositoriesServiceServer).Create(ctx, req.(*BinaryRepositoriesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryRepositoriesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryRepositoriesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryRepositoriesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/artifact.BinaryRepositoriesService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryRepositoriesServiceServer).Get(ctx, req.(*BinaryRepositoriesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryRepositoriesService_ServiceDesc is the grpc.ServiceDesc for BinaryRepositoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryRepositoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artifact.BinaryRepositoriesService",
	HandlerType: (*BinaryRepositoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BinaryRepositoriesService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BinaryRepositoriesService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BinaryRepositoriesService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifact/v1/binary-repositories.proto",
}
